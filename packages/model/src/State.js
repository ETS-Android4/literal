// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Decco = require("decco/src/Decco.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function timeState_encode(v) {
  return Js_dict.fromArray([
              [
                "cached",
                Decco.optionToJson((function (param) {
                        return Decco.arrayToJson(Decco.stringToJson, param);
                      }), v.cached)
              ],
              [
                "sourceDate",
                Decco.optionToJson((function (param) {
                        return Decco.arrayToJson((function (v) {
                                      return v;
                                    }), param);
                      }), v.sourceDate)
              ],
              [
                "type",
                Decco.stringToJson(v.type_)
              ],
              [
                "__typename",
                Decco.stringToJson(v.typename)
              ]
            ]);
}

function timeState_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var cached = Decco.optionFromJson((function (param) {
          return Decco.arrayFromJson(Decco.stringFromJson, param);
        }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "cached"), null));
  if (cached.TAG === /* Ok */0) {
    var sourceDate = Decco.optionFromJson((function (param) {
            return Decco.arrayFromJson((function (v) {
                          return {
                                  TAG: /* Ok */0,
                                  _0: v
                                };
                        }), param);
          }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "sourceDate"), null));
    if (sourceDate.TAG === /* Ok */0) {
      var type_ = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(dict$1, "type"), Decco.stringFromJson), {
            TAG: /* Ok */0,
            _0: "TIME_STATE"
          });
      if (type_.TAG === /* Ok */0) {
        var typename = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(dict$1, "__typename"), Decco.stringFromJson), {
              TAG: /* Ok */0,
              _0: "TimeState"
            });
        if (typename.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    cached: cached._0,
                    sourceDate: sourceDate._0,
                    type_: type_._0,
                    typename: typename._0
                  }
                };
        }
        var e = typename._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".__typename" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = type_._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".type" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = sourceDate._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".sourceDate" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = cached._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".cached" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function makeTimeState(cached, sourceDate, param) {
  return {
          cached: cached,
          sourceDate: sourceDate,
          type_: "TIME_STATE",
          typename: "TimeState"
        };
}

function makeTimeStateFromGraphQL(timeState) {
  return {
          TAG: /* TimeState */0,
          _0: makeTimeState(timeState.cached, timeState.sourceDate, undefined)
        };
}

function t_decode(json) {
  var match = Js_json.classify(json);
  if (typeof match === "number") {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONObject for state.",
              value: json
            }
          };
  }
  if (match.TAG !== /* JSONObject */2) {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONObject for state.",
              value: json
            }
          };
  }
  var timeState = timeState_decode(json);
  if (timeState.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              TAG: /* TimeState */0,
              _0: timeState._0
            }
          };
  } else {
    return {
            TAG: /* Ok */0,
            _0: {
              TAG: /* NotImplemented_Passthrough */1,
              _0: json
            }
          };
  }
}

function t_encode(t) {
  if (t.TAG === /* TimeState */0) {
    return timeState_encode(t._0);
  } else {
    return t._0;
  }
}

exports.timeState_encode = timeState_encode;
exports.timeState_decode = timeState_decode;
exports.makeTimeState = makeTimeState;
exports.makeTimeStateFromGraphQL = makeTimeStateFromGraphQL;
exports.t_decode = t_decode;
exports.t_encode = t_encode;
/* No side effect */
