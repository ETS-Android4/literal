// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Decco = require("decco/src/Decco.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Body$LiteralModel = require("./Body.js");
var Target$LiteralModel = require("./Target.js");

function t_encode(v) {
  var partial_arg = Body$LiteralModel.codec[0];
  return Js_dict.fromArray([
              [
                "created",
                Decco.optionToJson((function (v) {
                        return v;
                      }), v.created)
              ],
              [
                "modified",
                Decco.optionToJson((function (v) {
                        return v;
                      }), v.modified)
              ],
              [
                "id",
                Decco.optionToJson(Decco.stringToJson, v.id)
              ],
              [
                "target",
                Decco.arrayToJson(Target$LiteralModel.codec[0], v.target)
              ],
              [
                "body",
                Decco.optionToJson((function (param) {
                        return Decco.arrayToJson(partial_arg, param);
                      }), v.body)
              ],
              [
                "__typename",
                Decco.stringToJson(v.typename)
              ]
            ]);
}

function t_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var created = Decco.optionFromJson((function (v) {
          return {
                  TAG: /* Ok */0,
                  _0: v
                };
        }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "created"), null));
  if (created.TAG) {
    var e = created._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".created" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var modified = Decco.optionFromJson((function (v) {
          return {
                  TAG: /* Ok */0,
                  _0: v
                };
        }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "modified"), null));
  if (modified.TAG) {
    var e$1 = modified._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".modified" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var id = Decco.optionFromJson(Decco.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG) {
    var e$2 = id._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".id" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var target = Decco.arrayFromJson(Target$LiteralModel.codec[1], Belt_Option.getWithDefault(Js_dict.get(dict$1, "target"), null));
  if (target.TAG) {
    var e$3 = target._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".target" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var partial_arg = Body$LiteralModel.codec[1];
  var body = Decco.optionFromJson((function (param) {
          return Decco.arrayFromJson(partial_arg, param);
        }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "body"), null));
  if (body.TAG) {
    var e$4 = body._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".body" + e$4.path,
              message: e$4.message,
              value: e$4.value
            }
          };
  }
  var typename = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(dict$1, "__typename"), Decco.stringFromJson), {
        TAG: /* Ok */0,
        _0: "Annotation"
      });
  if (!typename.TAG) {
    return {
            TAG: /* Ok */0,
            _0: {
              created: created._0,
              modified: modified._0,
              id: id._0,
              target: target._0,
              body: body._0,
              typename: typename._0
            }
          };
  }
  var e$5 = typename._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".__typename" + e$5.path,
            message: e$5.message,
            value: e$5.value
          }
        };
}

function make(id, target, body, created, modified, param) {
  return {
          created: Js_option.some(Belt_Option.getWithDefault(created, new Date().toISOString())),
          modified: Js_option.some(Belt_Option.getWithDefault(modified, new Date().toISOString())),
          id: id,
          target: target,
          body: body,
          typename: "Annotation"
        };
}

function makeAnnotationFromGraphQL(makeTarget, makeBody, annotation) {
  return make(annotation.id, Belt_Array.keepMap(annotation.target, makeTarget), Belt_Option.map(annotation.body, (function (a) {
                    return Belt_Array.keepMap(a, makeBody);
                  })), undefined, undefined, undefined);
}

var encode = t_encode;

var decode = t_decode;

exports.t_encode = t_encode;
exports.t_decode = t_decode;
exports.make = make;
exports.makeAnnotationFromGraphQL = makeAnnotationFromGraphQL;
exports.encode = encode;
exports.decode = decode;
/* Target-LiteralModel Not a pure module */
